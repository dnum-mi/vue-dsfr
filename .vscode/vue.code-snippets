{
  // Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and \${1:label}, \${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "play": {
    "scope": "typescript",
    "prefix": "play",
    "body": [
      "$1play = async ({ canvasElement }) => {",
      "  const canvas = within(canvasElement)",
      "  const $2 = canvas.get$3",
      "  expect($4).to$5",
      "}"
    ],
    "description": "Crée un début de fonction play de storybook"
  },
  "vbase": {
    "scope": "vue",
    "prefix": "vbase",
    "body": [
      "<script>",
      "import { defineComponent } from 'vue'",
      "",
      "export default defineComponent({",
      "  name: '$1',",
      "  $3",
      "})",
      "</script>",
      "",
      "<template>",
      "  $2",
      "</template>",
      "",
      "<style scoped>",
      "$4",
      "</style>"
    ],
    "description": "Create SFC boilerplate"
  },
  "template": {
    "scope": "vue",
    "prefix": "template",
    "body": [
      "<template>",
      "  $1",
      "</template>"
    ],
    "description": "Create <template> block"
  },
  "script": {
  "scope": "vue",
  "prefix": "script",
  "body": [
    "<script>",
    "import { defineComponent } from 'vue'",
    "",
    "export default defineComponent({",
    "  name: 'Dsfr$1',",
    "  $2",
    "})",
    "</script>"
  ],
  "description": "Create <script> block"
  },
  "script setup": {
    "scope": "vue",
    "prefix": "script setup",
    "body": [
      "<script setup>",
      "defineProps({",
      "  $1",
      "})",
      "</script>"
    ],
    "description": "Create <script setup>"
  },
  "style": {
    "scope": "vue",
    "prefix": "style",
    "body": [
      "<style scoped>",
      "$1",
      "</style>"
    ],
    "description": "Create <style> block"
  },
  "v-for": {
    "scope": "html",
    "prefix": "v-for",
    "body": [
      "<${1:template} v-for=\"$2 in $3\">",
      "  $4",
      "</${1:template}>"
    ],
    "description": "Create html tag with v-for"
  },
  "v-if": {
    "scope": "html",
    "prefix": "v-if",
    "body": [
      "<${1:template} v-if=\"$1\">",
      "  $2",
      "</${1:template}>"
    ],
    "description": "Create html tag with v-if"
  },
  "v-else-if": {
    "scope": "html",
    "prefix": "v-else-if",
    "body": [
      "<${1:template} v-else-if=\"$1\">",
      "  $2",
      "</${1:template}>"
    ],
    "description": "Create html tag with v-else-if"
  },
  "v-else": {
    "scope": "html",
    "prefix": "v-else",
    "body": [
      "<${1:template} v-else>",
      "  $2",
      "</${1:template}>"
    ],
    "description": "Create html tag with v-else"
  },
  "props": {
    "scope": "javascript",
    "prefix": "props",
    "body": [
      "props: {",
      "  $1",
      "},"
    ],
    "description": "Create props boilerplate"
  },
  "data": {
    "scope": "javascript",
    "prefix": "data",
    "body": [
      "data () {",
      "  return {",
      "    $1",
      "  }",
      "},"
    ],
    "description": "Create data boilerplate"
  },
  "setup": {
    "scope": "javascript",
    "prefix": "setup",
    "body": [
      "setup (${1:props}, ${2:ctx}) {",
      "  return {",
      "    ${1:myProp}: {",
      "      type: ${2:String},",
      "      default: ${3:undefined},",
      "    },",
      "  }",
      "},"
    ],
    "description": "Create setup boilerplate"
  },
  "name": {
    "scope": "javascript",
    "prefix": "name",
    "body": [
      "name: '$1',",
    ],
    "description": "Create name boilerplate"
  },
  "watch": {
    "scope": "javascript",
    "prefix": "watch",
    "body": [
      "watch: {",
      "  $1 (newValue, oldValue) {",
      "    $2",
      "  }g",
      "}",
    ],
    "description": "Create watch with one property boilerplate"
  },
  "prop": {
    "scope": "javascript",
    "prefix": "prop",
    "body": [
      "${1:myProp}: {",
      "  type: ${2:String},",
      "  default: ${3:undefined},",
      "},",
    ],
    "description": "Create a prop with type and default boilerplate"
  },
  "booleanprop": {
    "scope": "javascript",
    "prefix": "booleanprop",
    "body": [
      "${1:myProp}: Boolean",
    ],
    "description": "Create a boolean boilerplate"
  },
  "arrayprop": {
    "scope": "javascript",
    "prefix": "arrayprop",
    "body": [
      "${1:myFun}: {",
      "  type: ${2:Array},",
      "  default: () => ${3:[]},",
      "},",
    ],
    "description": "Create a boolean boilerplate"
  },
  "watcher": {
    "scope": "javascript",
    "prefix": "watcher",
    "body": [
      "${varToWatch} (newValue, oldValue) {",
      "  $2",
      "},",
    ],
    "description": "Create a property for a watcher boilerplate"
  }
}
